"use client";

import { usePathname, useRouter } from "@/i18n/navigation";
import { useTranslations } from "next-intl";
import { siteConfig } from "@/config/site.config";
import { Button } from './ui/button';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from './ui/dropdown-menu';
import { Globe } from "lucide-react";
import useUserStore from '@/store/userStore';
import { useEffect } from 'react';

// Language display names mapping
const languageNames: Record<string, string> = {
  en: "English",
  zh: "‰∏≠Êñá",
  fr: "Fran√ßais",
  de: "Deutsch",
  es: "Espa√±ol",
  ja: "Êó•Êú¨Ë™û"
};

// Flag emojis for languages
const languageFlags: Record<string, string> = {
  en: "üá∫üá∏",
  zh: "üá®üá≥",
  fr: "üá´üá∑",
  de: "üá©üá™",
  es: "üá™üá∏",
  ja: "üáØüáµ"
};

export default function LocaleSwitcher() {
  const t = useTranslations('common');
  const router = useRouter();
  const pathname = usePathname();
  
  // ‰ΩøÁî®ZustandÁä∂ÊÄÅ
  const currentLanguage = useUserStore(state => state.preferences.language);
  const setUserLanguage = useUserStore(state => state.setLanguage);
  
  // È°µÈù¢Âä†ËΩΩÊó∂ÂêåÊ≠•ÂΩìÂâçËØ≠Ë®ÄÂà∞Zustand
  useEffect(() => {
    // ‰ªéURL‰∏≠ÊèêÂèñlocaleÂπ∂Êõ¥Êñ∞Zustand
    const localeFromPath = window.location.pathname.split('/')[1];
    if (siteConfig.locales.includes(localeFromPath) && localeFromPath !== currentLanguage) {
      setUserLanguage(localeFromPath);
    }
  }, [currentLanguage, setUserLanguage]);

  const switchLocale = (locale: string) => {
    // Êõ¥Êñ∞ZustandÁä∂ÊÄÅ
    setUserLanguage(locale);
    // ÂàáÊç¢Ë∑ØÁî±
    router.push(pathname, { locale });
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Globe className="h-5 w-5" />
          <span className="sr-only">{t('language')}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        {siteConfig.locales.map((locale) => (
          <DropdownMenuItem 
            key={locale}
            onClick={() => switchLocale(locale)}
            className={locale === currentLanguage ? "bg-muted" : ""}
          >
            {locale.toUpperCase()}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
} 